/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package teeth.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import teeth.model.TreatmentHistory;
import teeth.model.TreatmentHistoryModel;

/**
 * The base model implementation for the TreatmentHistory service. Represents a row in the &quot;treatment_history&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TreatmentHistoryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TreatmentHistoryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TreatmentHistoryImpl
 * @generated
 */
public class TreatmentHistoryModelImpl
	extends BaseModelImpl<TreatmentHistory> implements TreatmentHistoryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a treatment history model instance should use the <code>TreatmentHistory</code> interface instead.
	 */
	public static final String TABLE_NAME = "treatment_history";

	public static final Object[][] TABLE_COLUMNS = {
		{"treatmentID", Types.BIGINT}, {"patientID", Types.BIGINT},
		{"editedUserID", Types.BIGINT}, {"teethNum", Types.BIGINT},
		{"treatmentDate", Types.TIMESTAMP}, {"editedDate", Types.TIMESTAMP},
		{"treatment", Types.VARCHAR}, {"state_", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("treatmentID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("patientID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("editedUserID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teethNum", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("treatmentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("editedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("treatment", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table treatment_history (treatmentID LONG not null primary key,patientID LONG,editedUserID LONG,teethNum LONG,treatmentDate DATE null,editedDate DATE null,treatment VARCHAR(75) null,state_ VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table treatment_history";

	public static final String ORDER_BY_JPQL =
		" ORDER BY treatmentHistory.treatmentID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY treatment_history.treatmentID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long PATIENTID_COLUMN_BITMASK = 1L;

	public static final long TEETHNUM_COLUMN_BITMASK = 2L;

	public static final long TREATMENT_COLUMN_BITMASK = 4L;

	public static final long TREATMENTDATE_COLUMN_BITMASK = 8L;

	public static final long TREATMENTID_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public TreatmentHistoryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _treatmentID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTreatmentID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _treatmentID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TreatmentHistory.class;
	}

	@Override
	public String getModelClassName() {
		return TreatmentHistory.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TreatmentHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TreatmentHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TreatmentHistory, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TreatmentHistory)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TreatmentHistory, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TreatmentHistory, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TreatmentHistory)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TreatmentHistory, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TreatmentHistory, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TreatmentHistory, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TreatmentHistory, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TreatmentHistory, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<TreatmentHistory, Object>>();
		Map<String, BiConsumer<TreatmentHistory, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<TreatmentHistory, ?>>();

		attributeGetterFunctions.put(
			"treatmentID", TreatmentHistory::getTreatmentID);
		attributeSetterBiConsumers.put(
			"treatmentID",
			(BiConsumer<TreatmentHistory, Long>)
				TreatmentHistory::setTreatmentID);
		attributeGetterFunctions.put(
			"patientID", TreatmentHistory::getPatientID);
		attributeSetterBiConsumers.put(
			"patientID",
			(BiConsumer<TreatmentHistory, Long>)TreatmentHistory::setPatientID);
		attributeGetterFunctions.put(
			"editedUserID", TreatmentHistory::getEditedUserID);
		attributeSetterBiConsumers.put(
			"editedUserID",
			(BiConsumer<TreatmentHistory, Long>)
				TreatmentHistory::setEditedUserID);
		attributeGetterFunctions.put("teethNum", TreatmentHistory::getTeethNum);
		attributeSetterBiConsumers.put(
			"teethNum",
			(BiConsumer<TreatmentHistory, Long>)TreatmentHistory::setTeethNum);
		attributeGetterFunctions.put(
			"treatmentDate", TreatmentHistory::getTreatmentDate);
		attributeSetterBiConsumers.put(
			"treatmentDate",
			(BiConsumer<TreatmentHistory, Date>)
				TreatmentHistory::setTreatmentDate);
		attributeGetterFunctions.put(
			"editedDate", TreatmentHistory::getEditedDate);
		attributeSetterBiConsumers.put(
			"editedDate",
			(BiConsumer<TreatmentHistory, Date>)
				TreatmentHistory::setEditedDate);
		attributeGetterFunctions.put(
			"treatment", TreatmentHistory::getTreatment);
		attributeSetterBiConsumers.put(
			"treatment",
			(BiConsumer<TreatmentHistory, String>)
				TreatmentHistory::setTreatment);
		attributeGetterFunctions.put("state", TreatmentHistory::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<TreatmentHistory, String>)TreatmentHistory::setState);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getTreatmentID() {
		return _treatmentID;
	}

	@Override
	public void setTreatmentID(long treatmentID) {
		_treatmentID = treatmentID;
	}

	@Override
	public long getPatientID() {
		return _patientID;
	}

	@Override
	public void setPatientID(long patientID) {
		_columnBitmask |= PATIENTID_COLUMN_BITMASK;

		if (!_setOriginalPatientID) {
			_setOriginalPatientID = true;

			_originalPatientID = _patientID;
		}

		_patientID = patientID;
	}

	public long getOriginalPatientID() {
		return _originalPatientID;
	}

	@Override
	public long getEditedUserID() {
		return _editedUserID;
	}

	@Override
	public void setEditedUserID(long editedUserID) {
		_editedUserID = editedUserID;
	}

	@Override
	public long getTeethNum() {
		return _teethNum;
	}

	@Override
	public void setTeethNum(long teethNum) {
		_columnBitmask |= TEETHNUM_COLUMN_BITMASK;

		if (!_setOriginalTeethNum) {
			_setOriginalTeethNum = true;

			_originalTeethNum = _teethNum;
		}

		_teethNum = teethNum;
	}

	public long getOriginalTeethNum() {
		return _originalTeethNum;
	}

	@Override
	public Date getTreatmentDate() {
		return _treatmentDate;
	}

	@Override
	public void setTreatmentDate(Date treatmentDate) {
		_columnBitmask |= TREATMENTDATE_COLUMN_BITMASK;

		if (_originalTreatmentDate == null) {
			_originalTreatmentDate = _treatmentDate;
		}

		_treatmentDate = treatmentDate;
	}

	public Date getOriginalTreatmentDate() {
		return _originalTreatmentDate;
	}

	@Override
	public Date getEditedDate() {
		return _editedDate;
	}

	@Override
	public void setEditedDate(Date editedDate) {
		_editedDate = editedDate;
	}

	@Override
	public String getTreatment() {
		if (_treatment == null) {
			return "";
		}
		else {
			return _treatment;
		}
	}

	@Override
	public void setTreatment(String treatment) {
		_columnBitmask |= TREATMENT_COLUMN_BITMASK;

		if (_originalTreatment == null) {
			_originalTreatment = _treatment;
		}

		_treatment = treatment;
	}

	public String getOriginalTreatment() {
		return GetterUtil.getString(_originalTreatment);
	}

	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TreatmentHistory.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TreatmentHistory toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TreatmentHistory>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TreatmentHistoryImpl treatmentHistoryImpl = new TreatmentHistoryImpl();

		treatmentHistoryImpl.setTreatmentID(getTreatmentID());
		treatmentHistoryImpl.setPatientID(getPatientID());
		treatmentHistoryImpl.setEditedUserID(getEditedUserID());
		treatmentHistoryImpl.setTeethNum(getTeethNum());
		treatmentHistoryImpl.setTreatmentDate(getTreatmentDate());
		treatmentHistoryImpl.setEditedDate(getEditedDate());
		treatmentHistoryImpl.setTreatment(getTreatment());
		treatmentHistoryImpl.setState(getState());

		treatmentHistoryImpl.resetOriginalValues();

		return treatmentHistoryImpl;
	}

	@Override
	public int compareTo(TreatmentHistory treatmentHistory) {
		long primaryKey = treatmentHistory.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TreatmentHistory)) {
			return false;
		}

		TreatmentHistory treatmentHistory = (TreatmentHistory)object;

		long primaryKey = treatmentHistory.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalPatientID = _patientID;

		_setOriginalPatientID = false;

		_originalTeethNum = _teethNum;

		_setOriginalTeethNum = false;

		_originalTreatmentDate = _treatmentDate;

		_originalTreatment = _treatment;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TreatmentHistory> toCacheModel() {
		TreatmentHistoryCacheModel treatmentHistoryCacheModel =
			new TreatmentHistoryCacheModel();

		treatmentHistoryCacheModel.treatmentID = getTreatmentID();

		treatmentHistoryCacheModel.patientID = getPatientID();

		treatmentHistoryCacheModel.editedUserID = getEditedUserID();

		treatmentHistoryCacheModel.teethNum = getTeethNum();

		Date treatmentDate = getTreatmentDate();

		if (treatmentDate != null) {
			treatmentHistoryCacheModel.treatmentDate = treatmentDate.getTime();
		}
		else {
			treatmentHistoryCacheModel.treatmentDate = Long.MIN_VALUE;
		}

		Date editedDate = getEditedDate();

		if (editedDate != null) {
			treatmentHistoryCacheModel.editedDate = editedDate.getTime();
		}
		else {
			treatmentHistoryCacheModel.editedDate = Long.MIN_VALUE;
		}

		treatmentHistoryCacheModel.treatment = getTreatment();

		String treatment = treatmentHistoryCacheModel.treatment;

		if ((treatment != null) && (treatment.length() == 0)) {
			treatmentHistoryCacheModel.treatment = null;
		}

		treatmentHistoryCacheModel.state = getState();

		String state = treatmentHistoryCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			treatmentHistoryCacheModel.state = null;
		}

		return treatmentHistoryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TreatmentHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TreatmentHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TreatmentHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(TreatmentHistory)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TreatmentHistory, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TreatmentHistory, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TreatmentHistory, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TreatmentHistory)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TreatmentHistory>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TreatmentHistory.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _treatmentID;
	private long _patientID;
	private long _originalPatientID;
	private boolean _setOriginalPatientID;
	private long _editedUserID;
	private long _teethNum;
	private long _originalTeethNum;
	private boolean _setOriginalTeethNum;
	private Date _treatmentDate;
	private Date _originalTreatmentDate;
	private Date _editedDate;
	private String _treatment;
	private String _originalTreatment;
	private String _state;
	private long _columnBitmask;
	private TreatmentHistory _escapedModel;

}