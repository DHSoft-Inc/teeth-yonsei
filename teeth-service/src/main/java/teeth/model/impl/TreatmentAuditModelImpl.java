/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package teeth.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import teeth.model.TreatmentAudit;
import teeth.model.TreatmentAuditModel;

/**
 * The base model implementation for the TreatmentAudit service. Represents a row in the &quot;treatment_audit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TreatmentAuditModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TreatmentAuditImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TreatmentAuditImpl
 * @generated
 */
public class TreatmentAuditModelImpl
	extends BaseModelImpl<TreatmentAudit> implements TreatmentAuditModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a treatment audit model instance should use the <code>TreatmentAudit</code> interface instead.
	 */
	public static final String TABLE_NAME = "treatment_audit";

	public static final Object[][] TABLE_COLUMNS = {
		{"AuditID", Types.BIGINT}, {"teethNum", Types.BIGINT},
		{"editedDate", Types.TIMESTAMP}, {"editedUserID", Types.BIGINT},
		{"editType", Types.VARCHAR}, {"treatmentDate", Types.TIMESTAMP},
		{"beforeData", Types.VARCHAR}, {"afterData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("AuditID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("teethNum", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("editedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("editedUserID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("editType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("treatmentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("beforeData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("afterData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table treatment_audit (AuditID LONG not null primary key,teethNum LONG,editedDate DATE null,editedUserID LONG,editType VARCHAR(75) null,treatmentDate DATE null,beforeData VARCHAR(75) null,afterData VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table treatment_audit";

	public static final String ORDER_BY_JPQL =
		" ORDER BY treatmentAudit.AuditID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY treatment_audit.AuditID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long EDITTYPE_COLUMN_BITMASK = 1L;

	public static final long TEETHNUM_COLUMN_BITMASK = 2L;

	public static final long AUDITID_COLUMN_BITMASK = 4L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public TreatmentAuditModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _AuditID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAuditID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _AuditID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TreatmentAudit.class;
	}

	@Override
	public String getModelClassName() {
		return TreatmentAudit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TreatmentAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TreatmentAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TreatmentAudit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TreatmentAudit)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TreatmentAudit, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TreatmentAudit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TreatmentAudit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TreatmentAudit, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TreatmentAudit, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<TreatmentAudit, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TreatmentAudit, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TreatmentAudit, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TreatmentAudit, Object>>();
		Map<String, BiConsumer<TreatmentAudit, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TreatmentAudit, ?>>();

		attributeGetterFunctions.put("AuditID", TreatmentAudit::getAuditID);
		attributeSetterBiConsumers.put(
			"AuditID",
			(BiConsumer<TreatmentAudit, Long>)TreatmentAudit::setAuditID);
		attributeGetterFunctions.put("teethNum", TreatmentAudit::getTeethNum);
		attributeSetterBiConsumers.put(
			"teethNum",
			(BiConsumer<TreatmentAudit, Long>)TreatmentAudit::setTeethNum);
		attributeGetterFunctions.put(
			"editedDate", TreatmentAudit::getEditedDate);
		attributeSetterBiConsumers.put(
			"editedDate",
			(BiConsumer<TreatmentAudit, Date>)TreatmentAudit::setEditedDate);
		attributeGetterFunctions.put(
			"editedUserID", TreatmentAudit::getEditedUserID);
		attributeSetterBiConsumers.put(
			"editedUserID",
			(BiConsumer<TreatmentAudit, Long>)TreatmentAudit::setEditedUserID);
		attributeGetterFunctions.put("editType", TreatmentAudit::getEditType);
		attributeSetterBiConsumers.put(
			"editType",
			(BiConsumer<TreatmentAudit, String>)TreatmentAudit::setEditType);
		attributeGetterFunctions.put(
			"treatmentDate", TreatmentAudit::getTreatmentDate);
		attributeSetterBiConsumers.put(
			"treatmentDate",
			(BiConsumer<TreatmentAudit, Date>)TreatmentAudit::setTreatmentDate);
		attributeGetterFunctions.put(
			"beforeData", TreatmentAudit::getBeforeData);
		attributeSetterBiConsumers.put(
			"beforeData",
			(BiConsumer<TreatmentAudit, String>)TreatmentAudit::setBeforeData);
		attributeGetterFunctions.put("afterData", TreatmentAudit::getAfterData);
		attributeSetterBiConsumers.put(
			"afterData",
			(BiConsumer<TreatmentAudit, String>)TreatmentAudit::setAfterData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getAuditID() {
		return _AuditID;
	}

	@Override
	public void setAuditID(long AuditID) {
		_AuditID = AuditID;
	}

	@Override
	public long getTeethNum() {
		return _teethNum;
	}

	@Override
	public void setTeethNum(long teethNum) {
		_columnBitmask |= TEETHNUM_COLUMN_BITMASK;

		if (!_setOriginalTeethNum) {
			_setOriginalTeethNum = true;

			_originalTeethNum = _teethNum;
		}

		_teethNum = teethNum;
	}

	public long getOriginalTeethNum() {
		return _originalTeethNum;
	}

	@Override
	public Date getEditedDate() {
		return _editedDate;
	}

	@Override
	public void setEditedDate(Date editedDate) {
		_editedDate = editedDate;
	}

	@Override
	public long getEditedUserID() {
		return _editedUserID;
	}

	@Override
	public void setEditedUserID(long editedUserID) {
		_editedUserID = editedUserID;
	}

	@Override
	public String getEditType() {
		if (_editType == null) {
			return "";
		}
		else {
			return _editType;
		}
	}

	@Override
	public void setEditType(String editType) {
		_columnBitmask |= EDITTYPE_COLUMN_BITMASK;

		if (_originalEditType == null) {
			_originalEditType = _editType;
		}

		_editType = editType;
	}

	public String getOriginalEditType() {
		return GetterUtil.getString(_originalEditType);
	}

	@Override
	public Date getTreatmentDate() {
		return _treatmentDate;
	}

	@Override
	public void setTreatmentDate(Date treatmentDate) {
		_treatmentDate = treatmentDate;
	}

	@Override
	public String getBeforeData() {
		if (_beforeData == null) {
			return "";
		}
		else {
			return _beforeData;
		}
	}

	@Override
	public void setBeforeData(String beforeData) {
		_beforeData = beforeData;
	}

	@Override
	public String getAfterData() {
		if (_afterData == null) {
			return "";
		}
		else {
			return _afterData;
		}
	}

	@Override
	public void setAfterData(String afterData) {
		_afterData = afterData;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TreatmentAudit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TreatmentAudit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TreatmentAudit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TreatmentAuditImpl treatmentAuditImpl = new TreatmentAuditImpl();

		treatmentAuditImpl.setAuditID(getAuditID());
		treatmentAuditImpl.setTeethNum(getTeethNum());
		treatmentAuditImpl.setEditedDate(getEditedDate());
		treatmentAuditImpl.setEditedUserID(getEditedUserID());
		treatmentAuditImpl.setEditType(getEditType());
		treatmentAuditImpl.setTreatmentDate(getTreatmentDate());
		treatmentAuditImpl.setBeforeData(getBeforeData());
		treatmentAuditImpl.setAfterData(getAfterData());

		treatmentAuditImpl.resetOriginalValues();

		return treatmentAuditImpl;
	}

	@Override
	public int compareTo(TreatmentAudit treatmentAudit) {
		long primaryKey = treatmentAudit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof TreatmentAudit)) {
			return false;
		}

		TreatmentAudit treatmentAudit = (TreatmentAudit)object;

		long primaryKey = treatmentAudit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalTeethNum = _teethNum;

		_setOriginalTeethNum = false;

		_originalEditType = _editType;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<TreatmentAudit> toCacheModel() {
		TreatmentAuditCacheModel treatmentAuditCacheModel =
			new TreatmentAuditCacheModel();

		treatmentAuditCacheModel.AuditID = getAuditID();

		treatmentAuditCacheModel.teethNum = getTeethNum();

		Date editedDate = getEditedDate();

		if (editedDate != null) {
			treatmentAuditCacheModel.editedDate = editedDate.getTime();
		}
		else {
			treatmentAuditCacheModel.editedDate = Long.MIN_VALUE;
		}

		treatmentAuditCacheModel.editedUserID = getEditedUserID();

		treatmentAuditCacheModel.editType = getEditType();

		String editType = treatmentAuditCacheModel.editType;

		if ((editType != null) && (editType.length() == 0)) {
			treatmentAuditCacheModel.editType = null;
		}

		Date treatmentDate = getTreatmentDate();

		if (treatmentDate != null) {
			treatmentAuditCacheModel.treatmentDate = treatmentDate.getTime();
		}
		else {
			treatmentAuditCacheModel.treatmentDate = Long.MIN_VALUE;
		}

		treatmentAuditCacheModel.beforeData = getBeforeData();

		String beforeData = treatmentAuditCacheModel.beforeData;

		if ((beforeData != null) && (beforeData.length() == 0)) {
			treatmentAuditCacheModel.beforeData = null;
		}

		treatmentAuditCacheModel.afterData = getAfterData();

		String afterData = treatmentAuditCacheModel.afterData;

		if ((afterData != null) && (afterData.length() == 0)) {
			treatmentAuditCacheModel.afterData = null;
		}

		return treatmentAuditCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TreatmentAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TreatmentAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TreatmentAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((TreatmentAudit)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TreatmentAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TreatmentAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TreatmentAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TreatmentAudit)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TreatmentAudit>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					TreatmentAudit.class, ModelWrapper.class);

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _AuditID;
	private long _teethNum;
	private long _originalTeethNum;
	private boolean _setOriginalTeethNum;
	private Date _editedDate;
	private long _editedUserID;
	private String _editType;
	private String _originalEditType;
	private Date _treatmentDate;
	private String _beforeData;
	private String _afterData;
	private long _columnBitmask;
	private TreatmentAudit _escapedModel;

}